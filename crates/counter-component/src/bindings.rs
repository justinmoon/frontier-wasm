// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod vello {
    pub mod canvas {
        /// Shared math helpers
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod math {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Vec2 {
                pub x: f32,
                pub y: f32,
            }
            impl ::core::fmt::Debug for Vec2 {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Vec2")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }
        }
        /// Host capabilities the guest can call.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Color = super::super::super::vello::canvas::math::Color;
            pub type Vec2 = super::super::super::vello::canvas::math::Vec2;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Trace,
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Trace,
                        1 => LogLevel::Debug,
                        2 => LogLevel::Info,
                        3 => LogLevel::Warn,
                        4 => LogLevel::Error,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Clear the current scene background (call once per frame before drawing).
            pub fn clear(c: Color) -> () {
                unsafe {
                    let super::super::super::vello::canvas::math::Color {
                        r: r0,
                        g: g0,
                        b: b0,
                        a: a0,
                    } = c;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "vello:canvas/host@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "clear"]
                        fn wit_import1(_: f32, _: f32, _: f32, _: f32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: f32, _: f32, _: f32, _: f32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import1(
                            _rt::as_f32(r0),
                            _rt::as_f32(g0),
                            _rt::as_f32(b0),
                            _rt::as_f32(a0),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fill axis-aligned rectangle specified by top-left + size (logical pixels).
            pub fn fill_rect(origin: Vec2, size: Vec2, color: Color) -> () {
                unsafe {
                    let super::super::super::vello::canvas::math::Vec2 {
                        x: x0,
                        y: y0,
                    } = origin;
                    let super::super::super::vello::canvas::math::Vec2 {
                        x: x1,
                        y: y1,
                    } = size;
                    let super::super::super::vello::canvas::math::Color {
                        r: r2,
                        g: g2,
                        b: b2,
                        a: a2,
                    } = color;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "vello:canvas/host@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "fill-rect"]
                        fn wit_import3(
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(
                            _rt::as_f32(x0),
                            _rt::as_f32(y0),
                            _rt::as_f32(x1),
                            _rt::as_f32(y1),
                            _rt::as_f32(r2),
                            _rt::as_f32(g2),
                            _rt::as_f32(b2),
                            _rt::as_f32(a2),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Draw text anchored at baseline origin using a bundled font.
            pub fn draw_text(text: &str, origin: Vec2, size: f32, color: Color) -> () {
                unsafe {
                    let vec0 = text;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let super::super::super::vello::canvas::math::Vec2 {
                        x: x1,
                        y: y1,
                    } = origin;
                    let super::super::super::vello::canvas::math::Color {
                        r: r2,
                        g: g2,
                        b: b2,
                        a: a2,
                    } = color;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "vello:canvas/host@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "draw-text"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_f32(x1),
                            _rt::as_f32(y1),
                            _rt::as_f32(&size),
                            _rt::as_f32(r2),
                            _rt::as_f32(g2),
                            _rt::as_f32(b2),
                            _rt::as_f32(a2),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Request another animation frame; host coalesces multiple calls.
            pub fn request_frame() -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "vello:canvas/host@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "request-frame"]
                        fn wit_import0();
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() {
                        unreachable!()
                    }
                    unsafe { wit_import0() };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Debug logging surfaced via host console.
            pub fn log(level: LogLevel, message: &str) -> () {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "vello:canvas/host@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: i32, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0.cast_mut(), len0) };
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod vello {
        pub mod canvas {
            /// Events/lifecycle callbacks the guest exports.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod app {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Vec2 = super::super::super::super::vello::canvas::math::Vec2;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct LogicalSize {
                    pub width: f32,
                    pub height: f32,
                    pub scale_factor: f32,
                }
                impl ::core::fmt::Debug for LogicalSize {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("LogicalSize")
                            .field("width", &self.width)
                            .field("height", &self.height)
                            .field("scale-factor", &self.scale_factor)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct PointerButton {
                    pub primary: bool,
                    pub secondary: bool,
                }
                impl ::core::fmt::Debug for PointerButton {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PointerButton")
                            .field("primary", &self.primary)
                            .field("secondary", &self.secondary)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Modifiers {
                    pub shift: bool,
                    pub ctrl: bool,
                    pub alt: bool,
                    pub meta: bool,
                }
                impl ::core::fmt::Debug for Modifiers {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Modifiers")
                            .field("shift", &self.shift)
                            .field("ctrl", &self.ctrl)
                            .field("alt", &self.alt)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum PointerKind {
                    Mouse,
                    Touch,
                    Pen,
                }
                impl ::core::fmt::Debug for PointerKind {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            PointerKind::Mouse => {
                                f.debug_tuple("PointerKind::Mouse").finish()
                            }
                            PointerKind::Touch => {
                                f.debug_tuple("PointerKind::Touch").finish()
                            }
                            PointerKind::Pen => {
                                f.debug_tuple("PointerKind::Pen").finish()
                            }
                        }
                    }
                }
                impl PointerKind {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> PointerKind {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => PointerKind::Mouse,
                            1 => PointerKind::Touch,
                            2 => PointerKind::Pen,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct PointerEvent {
                    pub kind: PointerKind,
                    pub position: Vec2,
                    pub buttons: PointerButton,
                    pub modifiers: Modifiers,
                    pub pointer_id: u64,
                }
                impl ::core::fmt::Debug for PointerEvent {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PointerEvent")
                            .field("kind", &self.kind)
                            .field("position", &self.position)
                            .field("buttons", &self.buttons)
                            .field("modifiers", &self.modifiers)
                            .field("pointer-id", &self.pointer_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct KeyEvent {
                    pub key: _rt::String,
                    pub code: _rt::String,
                    pub modifiers: Modifiers,
                    pub is_repeat: bool,
                }
                impl ::core::fmt::Debug for KeyEvent {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("KeyEvent")
                            .field("key", &self.key)
                            .field("code", &self.code)
                            .field("modifiers", &self.modifiers)
                            .field("is-repeat", &self.is_repeat)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: f32,
                    arg1: f32,
                    arg2: f32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::init(LogicalSize {
                        width: arg0,
                        height: arg1,
                        scale_factor: arg2,
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_resize_cabi<T: Guest>(
                    arg0: f32,
                    arg1: f32,
                    arg2: f32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::resize(LogicalSize {
                        width: arg0,
                        height: arg1,
                        scale_factor: arg2,
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_pointer_down_cabi<T: Guest>(
                    arg0: i32,
                    arg1: f32,
                    arg2: f32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i64,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::pointer_down(PointerEvent {
                        kind: PointerKind::_lift(arg0 as u8),
                        position: super::super::super::super::vello::canvas::math::Vec2 {
                            x: arg1,
                            y: arg2,
                        },
                        buttons: PointerButton {
                            primary: _rt::bool_lift(arg3 as u8),
                            secondary: _rt::bool_lift(arg4 as u8),
                        },
                        modifiers: Modifiers {
                            shift: _rt::bool_lift(arg5 as u8),
                            ctrl: _rt::bool_lift(arg6 as u8),
                            alt: _rt::bool_lift(arg7 as u8),
                            meta: _rt::bool_lift(arg8 as u8),
                        },
                        pointer_id: arg9 as u64,
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_pointer_up_cabi<T: Guest>(
                    arg0: i32,
                    arg1: f32,
                    arg2: f32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i64,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::pointer_up(PointerEvent {
                        kind: PointerKind::_lift(arg0 as u8),
                        position: super::super::super::super::vello::canvas::math::Vec2 {
                            x: arg1,
                            y: arg2,
                        },
                        buttons: PointerButton {
                            primary: _rt::bool_lift(arg3 as u8),
                            secondary: _rt::bool_lift(arg4 as u8),
                        },
                        modifiers: Modifiers {
                            shift: _rt::bool_lift(arg5 as u8),
                            ctrl: _rt::bool_lift(arg6 as u8),
                            alt: _rt::bool_lift(arg7 as u8),
                            meta: _rt::bool_lift(arg8 as u8),
                        },
                        pointer_id: arg9 as u64,
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_pointer_move_cabi<T: Guest>(
                    arg0: i32,
                    arg1: f32,
                    arg2: f32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i64,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::pointer_move(PointerEvent {
                        kind: PointerKind::_lift(arg0 as u8),
                        position: super::super::super::super::vello::canvas::math::Vec2 {
                            x: arg1,
                            y: arg2,
                        },
                        buttons: PointerButton {
                            primary: _rt::bool_lift(arg3 as u8),
                            secondary: _rt::bool_lift(arg4 as u8),
                        },
                        modifiers: Modifiers {
                            shift: _rt::bool_lift(arg5 as u8),
                            ctrl: _rt::bool_lift(arg6 as u8),
                            alt: _rt::bool_lift(arg7 as u8),
                            meta: _rt::bool_lift(arg8 as u8),
                        },
                        pointer_id: arg9 as u64,
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_key_down_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    T::key_down(KeyEvent {
                        key: _rt::string_lift(bytes0),
                        code: _rt::string_lift(bytes1),
                        modifiers: Modifiers {
                            shift: _rt::bool_lift(arg4 as u8),
                            ctrl: _rt::bool_lift(arg5 as u8),
                            alt: _rt::bool_lift(arg6 as u8),
                            meta: _rt::bool_lift(arg7 as u8),
                        },
                        is_repeat: _rt::bool_lift(arg8 as u8),
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_key_up_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    T::key_up(KeyEvent {
                        key: _rt::string_lift(bytes0),
                        code: _rt::string_lift(bytes1),
                        modifiers: Modifiers {
                            shift: _rt::bool_lift(arg4 as u8),
                            ctrl: _rt::bool_lift(arg5 as u8),
                            alt: _rt::bool_lift(arg6 as u8),
                            meta: _rt::bool_lift(arg7 as u8),
                        },
                        is_repeat: _rt::bool_lift(arg8 as u8),
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_frame_cabi<T: Guest>(arg0: f32) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::frame(arg0);
                }
                pub trait Guest {
                    /// Called once after component instantiation.
                    fn init(initial: LogicalSize) -> ();
                    /// Called when window logical size or scale factor changes.
                    fn resize(new: LogicalSize) -> ();
                    /// Pointer events targeting the canvas.
                    fn pointer_down(evt: PointerEvent) -> ();
                    fn pointer_up(evt: PointerEvent) -> ();
                    fn pointer_move(evt: PointerEvent) -> ();
                    /// Keyboard focus is owned by the host; key events delivered when focused.
                    fn key_down(evt: KeyEvent) -> ();
                    fn key_up(evt: KeyEvent) -> ();
                    /// Frame callback. Host only invokes when guest requested redraw.
                    fn frame(dt_ms: f32) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_vello_canvas_app_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#init")] unsafe extern "C" fn
                        export_init(arg0 : f32, arg1 : f32, arg2 : f32,) { unsafe {
                        $($path_to_types)*:: _export_init_cabi::<$ty > (arg0, arg1, arg2)
                        } } #[unsafe (export_name = "vello:canvas/app@0.1.0#resize")]
                        unsafe extern "C" fn export_resize(arg0 : f32, arg1 : f32, arg2 :
                        f32,) { unsafe { $($path_to_types)*:: _export_resize_cabi::<$ty >
                        (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#pointer-down")] unsafe extern "C" fn
                        export_pointer_down(arg0 : i32, arg1 : f32, arg2 : f32, arg3 :
                        i32, arg4 : i32, arg5 : i32, arg6 : i32, arg7 : i32, arg8 : i32,
                        arg9 : i64,) { unsafe { $($path_to_types)*::
                        _export_pointer_down_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8, arg9) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#pointer-up")] unsafe extern "C" fn
                        export_pointer_up(arg0 : i32, arg1 : f32, arg2 : f32, arg3 : i32,
                        arg4 : i32, arg5 : i32, arg6 : i32, arg7 : i32, arg8 : i32, arg9
                        : i64,) { unsafe { $($path_to_types)*::
                        _export_pointer_up_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8, arg9) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#pointer-move")] unsafe extern "C" fn
                        export_pointer_move(arg0 : i32, arg1 : f32, arg2 : f32, arg3 :
                        i32, arg4 : i32, arg5 : i32, arg6 : i32, arg7 : i32, arg8 : i32,
                        arg9 : i64,) { unsafe { $($path_to_types)*::
                        _export_pointer_move_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8, arg9) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#key-down")] unsafe extern "C" fn
                        export_key_down(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
                        arg3 : usize, arg4 : i32, arg5 : i32, arg6 : i32, arg7 : i32,
                        arg8 : i32,) { unsafe { $($path_to_types)*::
                        _export_key_down_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#key-up")] unsafe extern "C" fn
                        export_key_up(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
                        arg3 : usize, arg4 : i32, arg5 : i32, arg6 : i32, arg7 : i32,
                        arg8 : i32,) { unsafe { $($path_to_types)*::
                        _export_key_up_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7, arg8) } } #[unsafe (export_name =
                        "vello:canvas/app@0.1.0#frame")] unsafe extern "C" fn
                        export_frame(arg0 : f32,) { unsafe { $($path_to_types)*::
                        _export_frame_cabi::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_vello_canvas_app_0_1_0_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_canvas_app_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::vello::canvas::app::__export_vello_canvas_app_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::vello::canvas::app);
    };
}
#[doc(inline)]
pub(crate) use __export_canvas_app_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:vello:canvas@0.1.0:canvas-app:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1025] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x80\x07\x01A\x02\x01\
A\x08\x01B\x04\x01r\x02\x01xv\x01yv\x04\0\x04vec2\x03\0\0\x01r\x04\x01rv\x01gv\x01\
bv\x01av\x04\0\x05color\x03\0\x02\x03\0\x17vello:canvas/math@0.1.0\x05\0\x02\x03\
\0\0\x05color\x02\x03\0\0\x04vec2\x01B\x10\x02\x03\x02\x01\x01\x04\0\x05color\x03\
\0\0\x02\x03\x02\x01\x02\x04\0\x04vec2\x03\0\x02\x01m\x05\x05trace\x05debug\x04i\
nfo\x04warn\x05error\x04\0\x09log-level\x03\0\x04\x01@\x01\x01c\x01\x01\0\x04\0\x05\
clear\x01\x06\x01@\x03\x06origin\x03\x04size\x03\x05color\x01\x01\0\x04\0\x09fil\
l-rect\x01\x07\x01@\x04\x04texts\x06origin\x03\x04sizev\x05color\x01\x01\0\x04\0\
\x09draw-text\x01\x08\x01@\0\x01\0\x04\0\x0drequest-frame\x01\x09\x01@\x02\x05le\
vel\x05\x07messages\x01\0\x04\0\x03log\x01\x0a\x03\0\x17vello:canvas/host@0.1.0\x05\
\x03\x01B\x1b\x02\x03\x02\x01\x02\x04\0\x04vec2\x03\0\0\x01r\x03\x05widthv\x06he\
ightv\x0cscale-factorv\x04\0\x0clogical-size\x03\0\x02\x01r\x02\x07primary\x7f\x09\
secondary\x7f\x04\0\x0epointer-button\x03\0\x04\x01r\x04\x05shift\x7f\x04ctrl\x7f\
\x03alt\x7f\x04meta\x7f\x04\0\x09modifiers\x03\0\x06\x01m\x03\x05mouse\x05touch\x03\
pen\x04\0\x0cpointer-kind\x03\0\x08\x01r\x05\x04kind\x09\x08position\x01\x07butt\
ons\x05\x09modifiers\x07\x0apointer-idw\x04\0\x0dpointer-event\x03\0\x0a\x01r\x04\
\x03keys\x04codes\x09modifiers\x07\x09is-repeat\x7f\x04\0\x09key-event\x03\0\x0c\
\x01@\x01\x07initial\x03\x01\0\x04\0\x04init\x01\x0e\x01@\x01\x03new\x03\x01\0\x04\
\0\x06resize\x01\x0f\x01@\x01\x03evt\x0b\x01\0\x04\0\x0cpointer-down\x01\x10\x04\
\0\x0apointer-up\x01\x10\x04\0\x0cpointer-move\x01\x10\x01@\x01\x03evt\x0d\x01\0\
\x04\0\x08key-down\x01\x11\x04\0\x06key-up\x01\x11\x01@\x01\x05dt-msv\x01\0\x04\0\
\x05frame\x01\x12\x04\0\x16vello:canvas/app@0.1.0\x05\x04\x04\0\x1dvello:canvas/\
canvas-app@0.1.0\x04\0\x0b\x10\x01\0\x0acanvas-app\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
